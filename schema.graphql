schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Actions {
  action_description: String
  action_id: ID!
  action_name: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  roles: JSON
  roles_func: count_functions
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_role(filter: Actions_directus_roles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Actions_directus_roles]
  user_role_func: count_functions
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type Actions_aggregated {
  avg: Actions_aggregated_fields
  avgDistinct: Actions_aggregated_fields
  count: Actions_aggregated_count
  countAll: Int
  countDistinct: Actions_aggregated_count
  group: JSON
  max: Actions_aggregated_fields
  min: Actions_aggregated_fields
  sum: Actions_aggregated_fields
  sumDistinct: Actions_aggregated_fields
}

type Actions_aggregated_count {
  action_description: Int
  action_id: Int
  action_name: Int
  date_created: Int
  date_updated: Int
  roles: Int
  sort: Int
  status: Int
  user_created: Int
  user_role: Int
  user_updated: Int
}

type Actions_aggregated_fields {
  action_id: Float
  sort: Float
}

type Actions_directus_roles {
  Actions_action_id(filter: Actions_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Actions
  directus_roles_id(filter: directus_roles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_roles
  id: ID!
}

type Actions_directus_roles_aggregated {
  avg: Actions_directus_roles_aggregated_fields
  avgDistinct: Actions_directus_roles_aggregated_fields
  count: Actions_directus_roles_aggregated_count
  countAll: Int
  countDistinct: Actions_directus_roles_aggregated_count
  group: JSON
  max: Actions_directus_roles_aggregated_fields
  min: Actions_directus_roles_aggregated_fields
  sum: Actions_directus_roles_aggregated_fields
  sumDistinct: Actions_directus_roles_aggregated_fields
}

type Actions_directus_roles_aggregated_count {
  Actions_action_id: Int
  directus_roles_id: Int
  id: Int
}

type Actions_directus_roles_aggregated_fields {
  Actions_action_id: Float
  id: Float
}

input Actions_directus_roles_filter {
  Actions_action_id: Actions_filter
  _and: [Actions_directus_roles_filter]
  _or: [Actions_directus_roles_filter]
  directus_roles_id: directus_roles_filter
  id: number_filter_operators
}

type Actions_directus_roles_mutated {
  data: Actions_directus_roles
  event: EventEnum
  key: ID!
}

input Actions_filter {
  _and: [Actions_filter]
  _or: [Actions_filter]
  action_description: string_filter_operators
  action_id: number_filter_operators
  action_name: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  roles: string_filter_operators
  roles_func: count_function_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_role: Actions_directus_roles_filter
  user_role_func: count_function_filter_operators
  user_updated: directus_users_filter
}

type Actions_mutated {
  data: Actions
  event: EventEnum
  key: ID!
}

type Aggregates {
  active_vessels: Int
  date_updated: Date
  date_updated_func: datetime_functions
  id: ID!
  total_countries: Int
  total_fishermen_actions: Int
  total_materials_recycled: Int
  total_ports: Int
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type Aggregates_aggregated {
  avg: Aggregates_aggregated_fields
  avgDistinct: Aggregates_aggregated_fields
  count: Aggregates_aggregated_count
  countAll: Int
  countDistinct: Aggregates_aggregated_count
  group: JSON
  max: Aggregates_aggregated_fields
  min: Aggregates_aggregated_fields
  sum: Aggregates_aggregated_fields
  sumDistinct: Aggregates_aggregated_fields
}

type Aggregates_aggregated_count {
  active_vessels: Int
  date_updated: Int
  id: Int
  total_countries: Int
  total_fishermen_actions: Int
  total_materials_recycled: Int
  total_ports: Int
  user_updated: Int
}

type Aggregates_aggregated_fields {
  active_vessels: Float
  id: Float
  total_countries: Float
  total_fishermen_actions: Float
  total_materials_recycled: Float
  total_ports: Float
}

input Aggregates_filter {
  _and: [Aggregates_filter]
  _or: [Aggregates_filter]
  active_vessels: number_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  id: number_filter_operators
  total_countries: number_filter_operators
  total_fishermen_actions: number_filter_operators
  total_materials_recycled: number_filter_operators
  total_ports: number_filter_operators
  user_updated: directus_users_filter
}

type Aggregates_mutated {
  data: Aggregates
  event: EventEnum
  key: ID!
}

type Collectors {
  collector_country: String
  collector_id: ID!
  """This usually use for Vessel name, or Ad-hoc collector name"""
  collector_name: String
  """If vessel is part of company, you can enter it here"""
  company_name: String
  contact_person: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  fishing_season: JSON
  fishing_season_func: count_functions
  """Is the collector active or not?"""
  is_active: Boolean
  place_origin_temp: String
  place_vessel_temp: String
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  vessel_type: JSON
  vessel_type_func: count_functions
}

type Collectors_aggregated {
  avg: Collectors_aggregated_fields
  avgDistinct: Collectors_aggregated_fields
  count: Collectors_aggregated_count
  countAll: Int
  countDistinct: Collectors_aggregated_count
  group: JSON
  max: Collectors_aggregated_fields
  min: Collectors_aggregated_fields
  sum: Collectors_aggregated_fields
  sumDistinct: Collectors_aggregated_fields
}

type Collectors_aggregated_count {
  collector_country: Int
  collector_id: Int
  """This usually use for Vessel name, or Ad-hoc collector name"""
  collector_name: Int
  """If vessel is part of company, you can enter it here"""
  company_name: Int
  contact_person: Int
  date_created: Int
  date_updated: Int
  fishing_season: Int
  """Is the collector active or not?"""
  is_active: Int
  place_origin_temp: Int
  place_vessel_temp: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
  vessel_type: Int
}

type Collectors_aggregated_fields {
  collector_id: Float
  sort: Float
}

input Collectors_filter {
  _and: [Collectors_filter]
  _or: [Collectors_filter]
  collector_country: string_filter_operators
  collector_id: number_filter_operators
  collector_name: string_filter_operators
  company_name: string_filter_operators
  contact_person: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  fishing_season: string_filter_operators
  fishing_season_func: count_function_filter_operators
  is_active: boolean_filter_operators
  place_origin_temp: string_filter_operators
  place_vessel_temp: string_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
  vessel_type: string_filter_operators
  vessel_type_func: count_function_filter_operators
}

type Collectors_mutated {
  data: Collectors
  event: EventEnum
  key: ID!
}

"""ISO8601 Date values"""
scalar Date

enum EventEnum {
  create
  delete
  update
}

type Events {
  EAS_UID: String
  EAS_timestamp: Date
  EAS_timestamp_func: datetime_functions
  action(filter: Actions_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Actions
  collector(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  """This should be system autogenerated"""
  event_id: ID!
  event_input_id(filter: Events_Input_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Input]
  event_input_id_func: count_functions
  """This is WHERE the event happen. It should be feeded by the mobile app."""
  event_location: String
  event_output_id(filter: Events_Output_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Output]
  event_output_id_func: count_functions
  """This is to capture when the action is taken place."""
  event_timestamp: Date
  event_timestamp_func: datetime_functions
  internal_tag: JSON
  internal_tag_func: count_functions
  on_behalf_of(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  production_id: String
  production_id_func: count_functions
  sort: Int
  sponsor_id(filter: Sponsors_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Sponsors
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type Events_Input {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  event_id(filter: Events_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Events
  event_input_id: ID!
  input_Material(filter: Materials_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Materials
  input_code: String
  input_weight: Int
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type Events_Input_aggregated {
  avg: Events_Input_aggregated_fields
  avgDistinct: Events_Input_aggregated_fields
  count: Events_Input_aggregated_count
  countAll: Int
  countDistinct: Events_Input_aggregated_count
  group: JSON
  max: Events_Input_aggregated_fields
  min: Events_Input_aggregated_fields
  sum: Events_Input_aggregated_fields
  sumDistinct: Events_Input_aggregated_fields
}

type Events_Input_aggregated_count {
  date_created: Int
  date_updated: Int
  event_id: Int
  event_input_id: Int
  input_Material: Int
  input_code: Int
  input_weight: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type Events_Input_aggregated_fields {
  event_id: Float
  event_input_id: Float
  input_Material: Float
  input_weight: Float
  sort: Float
}

input Events_Input_filter {
  _and: [Events_Input_filter]
  _or: [Events_Input_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  event_id: Events_filter
  event_input_id: number_filter_operators
  input_Material: Materials_filter
  input_code: string_filter_operators
  input_weight: number_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type Events_Input_mutated {
  data: Events_Input
  event: EventEnum
  key: ID!
}

type Events_Output {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  event_id(filter: Events_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Events
  event_output_id: ID!
  output_code: String
  output_material(filter: Materials_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Materials
  output_weight: Int
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type Events_Output_aggregated {
  avg: Events_Output_aggregated_fields
  avgDistinct: Events_Output_aggregated_fields
  count: Events_Output_aggregated_count
  countAll: Int
  countDistinct: Events_Output_aggregated_count
  group: JSON
  max: Events_Output_aggregated_fields
  min: Events_Output_aggregated_fields
  sum: Events_Output_aggregated_fields
  sumDistinct: Events_Output_aggregated_fields
}

type Events_Output_aggregated_count {
  date_created: Int
  date_updated: Int
  event_id: Int
  event_output_id: Int
  output_code: Int
  output_material: Int
  output_weight: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type Events_Output_aggregated_fields {
  event_id: Float
  event_output_id: Float
  output_material: Float
  output_weight: Float
  sort: Float
}

input Events_Output_filter {
  _and: [Events_Output_filter]
  _or: [Events_Output_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  event_id: Events_filter
  event_output_id: number_filter_operators
  output_code: string_filter_operators
  output_material: Materials_filter
  output_weight: number_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type Events_Output_mutated {
  data: Events_Output
  event: EventEnum
  key: ID!
}

type Events_aggregated {
  avg: Events_aggregated_fields
  avgDistinct: Events_aggregated_fields
  count: Events_aggregated_count
  countAll: Int
  countDistinct: Events_aggregated_count
  group: JSON
  max: Events_aggregated_fields
  min: Events_aggregated_fields
  sum: Events_aggregated_fields
  sumDistinct: Events_aggregated_fields
}

type Events_aggregated_count {
  EAS_UID: Int
  EAS_timestamp: Int
  """Select type of action, whether its fishing for litter...etc."""
  action: Int
  """This to give credit to WHO collect the waste. You can skip this if the action is for recycler."""
  collector: Int
  date_created: Int
  date_updated: Int
  """This should be system autogenerated"""
  event_id: Int
  """This is capture how much weight and its code input to the event."""
  event_input_id: Int
  """This is WHERE the event happen. It should be feeded by the mobile app."""
  event_location: Int
  """This is capture how much weight and its code output to the event."""
  event_output_id: Int
  """This is to capture when the action is taken place."""
  event_timestamp: Int
  internal_tag: Int
  """This field is reserved for Enaleia internal, when team need to enter data on behalf of port coordinator"""
  on_behalf_of: Int
  production_id: Int
  sort: Int
  sponsor_id: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type Events_aggregated_fields {
  """Select type of action, whether its fishing for litter...etc."""
  action: Float
  """This should be system autogenerated"""
  event_id: Float
  sort: Float
  sponsor_id: Float
}

input Events_filter {
  EAS_UID: string_filter_operators
  EAS_timestamp: date_filter_operators
  EAS_timestamp_func: datetime_function_filter_operators
  _and: [Events_filter]
  _or: [Events_filter]
  action: Actions_filter
  collector: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  event_id: number_filter_operators
  event_input_id: Events_Input_filter
  event_input_id_func: count_function_filter_operators
  event_location: string_filter_operators
  event_output_id: Events_Output_filter
  event_output_id_func: count_function_filter_operators
  event_timestamp: date_filter_operators
  event_timestamp_func: datetime_function_filter_operators
  internal_tag: string_filter_operators
  internal_tag_func: count_function_filter_operators
  on_behalf_of: directus_users_filter
  production_id: string_filter_operators
  production_id_func: count_function_filter_operators
  sort: number_filter_operators
  sponsor_id: Sponsors_filter
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type Events_mutated {
  data: Events
  event: EventEnum
  key: ID!
}

"""GeoJSON value"""
scalar GraphQLGeoJSON

"""A Float or a String"""
scalar GraphQLStringOrFloat

"""Hashed string values"""
scalar Hash

"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON

type Materials {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  material_description: String
  material_id: ID!
  material_name: String
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_role(filter: Materials_directus_roles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Materials_directus_roles]
  user_role_func: count_functions
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type Materials_aggregated {
  avg: Materials_aggregated_fields
  avgDistinct: Materials_aggregated_fields
  count: Materials_aggregated_count
  countAll: Int
  countDistinct: Materials_aggregated_count
  group: JSON
  max: Materials_aggregated_fields
  min: Materials_aggregated_fields
  sum: Materials_aggregated_fields
  sumDistinct: Materials_aggregated_fields
}

type Materials_aggregated_count {
  date_created: Int
  date_updated: Int
  material_description: Int
  material_id: Int
  material_name: Int
  sort: Int
  status: Int
  user_created: Int
  user_role: Int
  user_updated: Int
}

type Materials_aggregated_fields {
  material_id: Float
  sort: Float
}

type Materials_directus_roles {
  Materials_material_id(filter: Materials_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Materials
  directus_roles_id(filter: directus_roles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_roles
  id: ID!
}

type Materials_directus_roles_aggregated {
  avg: Materials_directus_roles_aggregated_fields
  avgDistinct: Materials_directus_roles_aggregated_fields
  count: Materials_directus_roles_aggregated_count
  countAll: Int
  countDistinct: Materials_directus_roles_aggregated_count
  group: JSON
  max: Materials_directus_roles_aggregated_fields
  min: Materials_directus_roles_aggregated_fields
  sum: Materials_directus_roles_aggregated_fields
  sumDistinct: Materials_directus_roles_aggregated_fields
}

type Materials_directus_roles_aggregated_count {
  Materials_material_id: Int
  directus_roles_id: Int
  id: Int
}

type Materials_directus_roles_aggregated_fields {
  Materials_material_id: Float
  id: Float
}

input Materials_directus_roles_filter {
  Materials_material_id: Materials_filter
  _and: [Materials_directus_roles_filter]
  _or: [Materials_directus_roles_filter]
  directus_roles_id: directus_roles_filter
  id: number_filter_operators
}

type Materials_directus_roles_mutated {
  data: Materials_directus_roles
  event: EventEnum
  key: ID!
}

input Materials_filter {
  _and: [Materials_filter]
  _or: [Materials_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  material_description: string_filter_operators
  material_id: number_filter_operators
  material_name: string_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_role: Materials_directus_roles_filter
  user_role_func: count_function_filter_operators
  user_updated: directus_users_filter
}

type Materials_mutated {
  data: Materials
  event: EventEnum
  key: ID!
}

type Mutation {
  create_Events_Input_item(data: create_Events_Input_input!): Events_Input
  create_Events_Input_items(data: [create_Events_Input_input!], filter: Events_Input_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Input!]!
  create_Events_Output_item(data: create_Events_Output_input!): Events_Output
  create_Events_Output_items(data: [create_Events_Output_input!], filter: Events_Output_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Output!]!
  create_Events_item(data: create_Events_input!): Events
  create_Events_items(data: [create_Events_input!], filter: Events_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events!]!
  create_activity_item(data: create_activity_input!): activity
  create_activity_items(data: [create_activity_input!], filter: activity_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [activity!]!
  create_resource_item(data: create_resource_input!): resource
  create_resource_items(data: [create_resource_input!], filter: resource_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [resource!]!
}

type Production {
  NFT_link: String
  batch_identifier: String
  batch_quantity: Int
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  event_id(filter: Events_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Events
  product_id(filter: Products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Products
  production_id: ID!
  production_url: String
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type Production_aggregated {
  avg: Production_aggregated_fields
  avgDistinct: Production_aggregated_fields
  count: Production_aggregated_count
  countAll: Int
  countDistinct: Production_aggregated_count
  group: JSON
  max: Production_aggregated_fields
  min: Production_aggregated_fields
  sum: Production_aggregated_fields
  sumDistinct: Production_aggregated_fields
}

type Production_aggregated_count {
  NFT_link: Int
  batch_identifier: Int
  batch_quantity: Int
  date_created: Int
  date_updated: Int
  event_id: Int
  product_id: Int
  production_id: Int
  production_url: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type Production_aggregated_fields {
  batch_quantity: Float
  event_id: Float
  product_id: Float
  production_id: Float
  sort: Float
}

input Production_filter {
  NFT_link: string_filter_operators
  _and: [Production_filter]
  _or: [Production_filter]
  batch_identifier: string_filter_operators
  batch_quantity: number_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  event_id: Events_filter
  product_id: Products_filter
  production_id: number_filter_operators
  production_url: string_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type Production_mutated {
  data: Production
  event: EventEnum
  key: ID!
}

type Products {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  manufactured_by(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  product_id: ID!
  product_name: String
  product_type: JSON
  product_type_func: count_functions
  product_weight: Int
  section_title: String
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type Products_aggregated {
  avg: Products_aggregated_fields
  avgDistinct: Products_aggregated_fields
  count: Products_aggregated_count
  countAll: Int
  countDistinct: Products_aggregated_count
  group: JSON
  max: Products_aggregated_fields
  min: Products_aggregated_fields
  sum: Products_aggregated_fields
  sumDistinct: Products_aggregated_fields
}

type Products_aggregated_count {
  date_created: Int
  date_updated: Int
  manufactured_by: Int
  product_id: Int
  product_name: Int
  product_type: Int
  product_weight: Int
  section_title: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type Products_aggregated_fields {
  product_id: Float
  product_weight: Float
  sort: Float
}

input Products_filter {
  _and: [Products_filter]
  _or: [Products_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  manufactured_by: directus_users_filter
  product_id: number_filter_operators
  product_name: string_filter_operators
  product_type: string_filter_operators
  product_type_func: count_function_filter_operators
  product_weight: number_filter_operators
  section_title: string_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type Products_mutated {
  data: Products
  event: EventEnum
  key: ID!
}

type Query {
  Actions(filter: Actions_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Actions!]!
  Actions_aggregated(filter: Actions_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Actions_aggregated!]!
  Actions_by_id(id: ID!, version: String): Actions
  Actions_by_version(id: ID!, version: String!): version_Actions
  Actions_directus_roles(filter: Actions_directus_roles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Actions_directus_roles!]!
  Actions_directus_roles_aggregated(filter: Actions_directus_roles_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Actions_directus_roles_aggregated!]!
  Actions_directus_roles_by_id(id: ID!, version: String): Actions_directus_roles
  Actions_directus_roles_by_version(id: ID!, version: String!): version_Actions_directus_roles
  Aggregates(filter: Aggregates_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Aggregates!]!
  Aggregates_aggregated(filter: Aggregates_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Aggregates_aggregated!]!
  Aggregates_by_id(id: ID!, version: String): Aggregates
  Aggregates_by_version(id: ID!, version: String!): version_Aggregates
  Collectors(filter: Collectors_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Collectors!]!
  Collectors_aggregated(filter: Collectors_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Collectors_aggregated!]!
  Collectors_by_id(id: ID!, version: String): Collectors
  Collectors_by_version(id: ID!, version: String!): version_Collectors
  Events(filter: Events_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events!]!
  Events_Input(filter: Events_Input_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Input!]!
  Events_Input_aggregated(filter: Events_Input_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Input_aggregated!]!
  Events_Input_by_id(id: ID!, version: String): Events_Input
  Events_Input_by_version(id: ID!, version: String!): version_Events_Input
  Events_Output(filter: Events_Output_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Output!]!
  Events_Output_aggregated(filter: Events_Output_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Output_aggregated!]!
  Events_Output_by_id(id: ID!, version: String): Events_Output
  Events_Output_by_version(id: ID!, version: String!): version_Events_Output
  Events_aggregated(filter: Events_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_aggregated!]!
  Events_by_id(id: ID!, version: String): Events
  Events_by_version(id: ID!, version: String!): version_Events
  Materials(filter: Materials_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Materials!]!
  Materials_aggregated(filter: Materials_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Materials_aggregated!]!
  Materials_by_id(id: ID!, version: String): Materials
  Materials_by_version(id: ID!, version: String!): version_Materials
  Materials_directus_roles(filter: Materials_directus_roles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Materials_directus_roles!]!
  Materials_directus_roles_aggregated(filter: Materials_directus_roles_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Materials_directus_roles_aggregated!]!
  Materials_directus_roles_by_id(id: ID!, version: String): Materials_directus_roles
  Materials_directus_roles_by_version(id: ID!, version: String!): version_Materials_directus_roles
  Production(filter: Production_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Production!]!
  Production_aggregated(filter: Production_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Production_aggregated!]!
  Production_by_id(id: ID!, version: String): Production
  Production_by_version(id: ID!, version: String!): version_Production
  Products(filter: Products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Products!]!
  Products_aggregated(filter: Products_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Products_aggregated!]!
  Products_by_id(id: ID!, version: String): Products
  Products_by_version(id: ID!, version: String!): version_Products
  Sponsors(filter: Sponsors_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Sponsors!]!
  Sponsors_aggregated(filter: Sponsors_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Sponsors_aggregated!]!
  Sponsors_by_id(id: ID!, version: String): Sponsors
  Sponsors_by_version(id: ID!, version: String!): version_Sponsors
  activity(filter: activity_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [activity!]!
  activity_aggregated(filter: activity_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [activity_aggregated!]!
  activity_by_id(id: ID!, version: String): activity
  activity_by_version(id: ID!, version: String!): version_activity
  resource(filter: resource_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [resource!]!
  resource_aggregated(filter: resource_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [resource_aggregated!]!
  resource_by_id(id: ID!, version: String): resource
  resource_by_version(id: ID!, version: String!): version_resource
}

type Sponsors {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  sort: Int
  sponsor_id: ID!
  sponsor_name: String
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type Sponsors_aggregated {
  avg: Sponsors_aggregated_fields
  avgDistinct: Sponsors_aggregated_fields
  count: Sponsors_aggregated_count
  countAll: Int
  countDistinct: Sponsors_aggregated_count
  group: JSON
  max: Sponsors_aggregated_fields
  min: Sponsors_aggregated_fields
  sum: Sponsors_aggregated_fields
  sumDistinct: Sponsors_aggregated_fields
}

type Sponsors_aggregated_count {
  date_created: Int
  date_updated: Int
  sort: Int
  sponsor_id: Int
  sponsor_name: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type Sponsors_aggregated_fields {
  sort: Float
  sponsor_id: Float
}

input Sponsors_filter {
  _and: [Sponsors_filter]
  _or: [Sponsors_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  sort: number_filter_operators
  sponsor_id: number_filter_operators
  sponsor_name: string_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type Sponsors_mutated {
  data: Sponsors
  event: EventEnum
  key: ID!
}

type Subscription {
  Actions_directus_roles_mutated(event: EventEnum): Actions_directus_roles_mutated
  Actions_mutated(event: EventEnum): Actions_mutated
  Aggregates_mutated(event: EventEnum): Aggregates_mutated
  Collectors_mutated(event: EventEnum): Collectors_mutated
  Events_Input_mutated(event: EventEnum): Events_Input_mutated
  Events_Output_mutated(event: EventEnum): Events_Output_mutated
  Events_mutated(event: EventEnum): Events_mutated
  Materials_directus_roles_mutated(event: EventEnum): Materials_directus_roles_mutated
  Materials_mutated(event: EventEnum): Materials_mutated
  Production_mutated(event: EventEnum): Production_mutated
  Products_mutated(event: EventEnum): Products_mutated
  Sponsors_mutated(event: EventEnum): Sponsors_mutated
  activity_mutated(event: EventEnum): activity_mutated
  directus_access_mutated(event: EventEnum): directus_access_mutated
  directus_roles_mutated(event: EventEnum): directus_roles_mutated
  directus_users_mutated(event: EventEnum): directus_users_mutated
  resource_mutated(event: EventEnum): resource_mutated
}

type activity {
  date_created: Date
  date_created_func: datetime_functions
  id: ID!
  location: GraphQLGeoJSON
  type: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type activity_aggregated {
  count: activity_aggregated_count
  countAll: Int
  countDistinct: activity_aggregated_count
  group: JSON
}

type activity_aggregated_count {
  date_created: Int
  id: Int
  location: Int
  type: Int
  user_created: Int
}

input activity_filter {
  _and: [activity_filter]
  _or: [activity_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  id: string_filter_operators
  location: geometry_filter_operators
  type: string_filter_operators
  user_created: directus_users_filter
}

type activity_mutated {
  data: activity
  event: EventEnum
  key: ID!
}

input boolean_filter_operators {
  _eq: Boolean
  _neq: Boolean
  _nnull: Boolean
  _null: Boolean
}

input count_function_filter_operators {
  count: number_filter_operators
}

type count_functions {
  count: Int
}

input create_Events_Input_input {
  date_created: Date
  date_updated: Date
  event_id: create_Events_input
  event_input_id: ID
  input_Material: Int
  input_code: String
  input_weight: Int
  sort: Int
  status: String
  user_created: String
  user_updated: String
}

input create_Events_Output_input {
  date_created: Date
  date_updated: Date
  event_id: create_Events_input
  event_output_id: ID
  output_code: String
  output_material: Int
  output_weight: Int
  sort: Int
  status: String
  user_created: String
  user_updated: String
}

input create_Events_input {
  EAS_UID: String
  EAS_timestamp: Date
  """Select type of action, whether its fishing for litter...etc."""
  action: Int
  """This to give credit to WHO collect the waste. You can skip this if the action is for recycler."""
  collector: String
  date_created: Date
  date_updated: Date
  """This should be system autogenerated"""
  event_id: ID
  event_input_id: [create_Events_Input_input]
  """This is WHERE the event happen. It should be feeded by the mobile app."""
  event_location: String
  event_output_id: [create_Events_Output_input]
  """This is to capture when the action is taken place."""
  event_timestamp: Date
  internal_tag: JSON
  """This field is reserved for Enaleia internal, when team need to enter data on behalf of port coordinator"""
  on_behalf_of: String
  production_id: String
  sort: Int
  sponsor_id: Int
  status: String
  user_created: String
  user_updated: String
}

input create_activity_input {
  date_created: Date
  id: ID
  location: GraphQLGeoJSON
  type: String
  user_created: String
}

input create_resource_input {
  id: ID
  identifier: String
  materials: String
  type: String
  weight_kg: Float
}

input date_filter_operators {
  _between: [GraphQLStringOrFloat]
  _eq: String
  _gt: String
  _gte: String
  _in: [String]
  _lt: String
  _lte: String
  _nbetween: [GraphQLStringOrFloat]
  _neq: String
  _nin: [String]
  _nnull: Boolean
  _null: Boolean
}

input datetime_function_filter_operators {
  day: number_filter_operators
  hour: number_filter_operators
  minute: number_filter_operators
  month: number_filter_operators
  second: number_filter_operators
  week: number_filter_operators
  weekday: number_filter_operators
  year: number_filter_operators
}

type datetime_functions {
  day: Int
  hour: Int
  minute: Int
  month: Int
  second: Int
  week: Int
  weekday: Int
  year: Int
}

type directus_access {
  id: ID!
  policy: String!
  role(filter: directus_roles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_roles
  sort: Int
  user(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

input directus_access_filter {
  _and: [directus_access_filter]
  _or: [directus_access_filter]
  id: string_filter_operators
  policy: string_filter_operators
  role: directus_roles_filter
  sort: number_filter_operators
  user: directus_users_filter
}

type directus_access_mutated {
  data: directus_access
  event: EventEnum
  key: ID!
}

type directus_roles {
  children(filter: directus_roles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_roles]
  children_func: count_functions
  description: String
  icon: String
  id: ID!
  name: String!
  parent(filter: directus_roles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_roles
  policies(filter: directus_access_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_access]
  policies_func: count_functions
  test(filter: Actions_directus_roles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Actions_directus_roles]
  users(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_users]
  users_func: count_functions
}

input directus_roles_filter {
  _and: [directus_roles_filter]
  _or: [directus_roles_filter]
  children: directus_roles_filter
  children_func: count_function_filter_operators
  description: string_filter_operators
  icon: string_filter_operators
  id: string_filter_operators
  name: string_filter_operators
  parent: directus_roles_filter
  policies: directus_access_filter
  policies_func: count_function_filter_operators
  test: Actions_directus_roles_filter
  users: directus_users_filter
  users_func: count_function_filter_operators
}

type directus_roles_mutated {
  data: directus_roles
  event: EventEnum
  key: ID!
}

type directus_users {
  Country: JSON
  Country_func: count_functions
  appearance: String
  auth_data: JSON
  auth_data_func: count_functions
  avatar: String
  """This can be the port name or company name"""
  company_name: String
  contact_person: String
  coordinates: String
  description: String
  email: String
  email_notifications: Boolean
  external_identifier: String
  first_name: String
  id: ID!
  language: String
  last_access: Date
  last_access_func: datetime_functions
  last_name: String
  last_page: String
  location: String
  password: Hash
  policies(filter: directus_access_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_access]
  policies_func: count_functions
  provider: String
  registered_port: String
  role(filter: directus_roles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_roles
  status: String
  tags: JSON
  tags_func: count_functions
  """this is a temp field to bring data from xsl to directus"""
  temp_origin: String
  """This is a temp field to bring data from xsl to directus"""
  temp_vessel: String
  tfa_secret: Hash
  theme_dark: String
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
  theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  title: String
  token: Hash
  """This should be manually enter, where this user's city"""
  user_city: String
  user_country: String
  vessel_ID: String
  vessel_identifier: Int
  """This is only if the user is fisherman"""
  vessel_type: String
  wallet_address: String
}

input directus_users_filter {
  Country: string_filter_operators
  Country_func: count_function_filter_operators
  _and: [directus_users_filter]
  _or: [directus_users_filter]
  appearance: string_filter_operators
  auth_data: string_filter_operators
  auth_data_func: count_function_filter_operators
  avatar: string_filter_operators
  company_name: string_filter_operators
  contact_person: string_filter_operators
  coordinates: string_filter_operators
  description: string_filter_operators
  email: string_filter_operators
  email_notifications: boolean_filter_operators
  external_identifier: string_filter_operators
  first_name: string_filter_operators
  id: string_filter_operators
  language: string_filter_operators
  last_access: date_filter_operators
  last_access_func: datetime_function_filter_operators
  last_name: string_filter_operators
  last_page: string_filter_operators
  location: string_filter_operators
  password: hash_filter_operators
  policies: directus_access_filter
  policies_func: count_function_filter_operators
  provider: string_filter_operators
  registered_port: string_filter_operators
  role: directus_roles_filter
  status: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  temp_origin: string_filter_operators
  temp_vessel: string_filter_operators
  tfa_secret: hash_filter_operators
  theme_dark: string_filter_operators
  theme_dark_overrides: string_filter_operators
  theme_dark_overrides_func: count_function_filter_operators
  theme_light: string_filter_operators
  theme_light_overrides: string_filter_operators
  theme_light_overrides_func: count_function_filter_operators
  title: string_filter_operators
  token: hash_filter_operators
  user_city: string_filter_operators
  user_country: string_filter_operators
  vessel_ID: string_filter_operators
  vessel_identifier: number_filter_operators
  vessel_type: string_filter_operators
  wallet_address: string_filter_operators
}

type directus_users_mutated {
  data: directus_users
  event: EventEnum
  key: ID!
}

input geometry_filter_operators {
  _eq: GraphQLGeoJSON
  _intersects: GraphQLGeoJSON
  _intersects_bbox: GraphQLGeoJSON
  _neq: GraphQLGeoJSON
  _nintersects: GraphQLGeoJSON
  _nintersects_bbox: GraphQLGeoJSON
  _nnull: Boolean
  _null: Boolean
}

input hash_filter_operators {
  _empty: Boolean
  _nempty: Boolean
  _nnull: Boolean
  _null: Boolean
}

input number_filter_operators {
  _between: [GraphQLStringOrFloat]
  _eq: GraphQLStringOrFloat
  _gt: GraphQLStringOrFloat
  _gte: GraphQLStringOrFloat
  _in: [GraphQLStringOrFloat]
  _lt: GraphQLStringOrFloat
  _lte: GraphQLStringOrFloat
  _nbetween: [GraphQLStringOrFloat]
  _neq: GraphQLStringOrFloat
  _nin: [GraphQLStringOrFloat]
  _nnull: Boolean
  _null: Boolean
}

type resource {
  id: ID!
  identifier: String
  materials: String
  materials_func: count_functions
  type: String
  weight_kg: Float
}

type resource_aggregated {
  avg: resource_aggregated_fields
  avgDistinct: resource_aggregated_fields
  count: resource_aggregated_count
  countAll: Int
  countDistinct: resource_aggregated_count
  group: JSON
  max: resource_aggregated_fields
  min: resource_aggregated_fields
  sum: resource_aggregated_fields
  sumDistinct: resource_aggregated_fields
}

type resource_aggregated_count {
  id: Int
  identifier: Int
  materials: Int
  type: Int
  weight_kg: Int
}

type resource_aggregated_fields {
  weight_kg: Float
}

input resource_filter {
  _and: [resource_filter]
  _or: [resource_filter]
  id: string_filter_operators
  identifier: string_filter_operators
  materials: string_filter_operators
  materials_func: count_function_filter_operators
  type: string_filter_operators
  weight_kg: number_filter_operators
}

type resource_mutated {
  data: resource
  event: EventEnum
  key: ID!
}

input string_filter_operators {
  _contains: String
  _empty: Boolean
  _ends_with: String
  _eq: String
  _icontains: String
  _iends_with: String
  _in: [String]
  _istarts_with: String
  _ncontains: String
  _nempty: Boolean
  _nends_with: String
  _neq: String
  _niends_with: String
  _nin: [String]
  _nistarts_with: String
  _nnull: Boolean
  _nstarts_with: String
  _null: Boolean
  _starts_with: String
}

type version_Actions {
  action_description: String
  action_id: ID!
  action_name: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  roles: JSON
  roles_func: count_functions
  sort: Int
  status: String
  user_created: JSON
  user_role: JSON
  user_role_func: count_functions
  user_updated: JSON
}

type version_Actions_directus_roles {
  Actions_action_id: JSON
  directus_roles_id: JSON
  id: ID!
}

type version_Aggregates {
  active_vessels: Int
  date_updated: Date
  date_updated_func: datetime_functions
  id: ID!
  total_countries: Int
  total_fishermen_actions: Int
  total_materials_recycled: Int
  total_ports: Int
  user_updated: JSON
}

type version_Collectors {
  collector_country: String
  collector_id: ID!
  """This usually use for Vessel name, or Ad-hoc collector name"""
  collector_name: String
  """If vessel is part of company, you can enter it here"""
  company_name: String
  contact_person: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  fishing_season: JSON
  fishing_season_func: count_functions
  """Is the collector active or not?"""
  is_active: Boolean
  place_origin_temp: String
  place_vessel_temp: String
  sort: Int
  status: String
  user_created: JSON
  user_updated: JSON
  vessel_type: JSON
  vessel_type_func: count_functions
}

type version_Events {
  EAS_UID: String
  EAS_timestamp: Date
  """Select type of action, whether its fishing for litter...etc."""
  action: Int
  """This to give credit to WHO collect the waste. You can skip this if the action is for recycler."""
  collector: String
  date_created: Date
  date_updated: Date
  """This should be system autogenerated"""
  event_id: ID
  event_input_id: JSON
  """This is WHERE the event happen. It should be feeded by the mobile app."""
  event_location: String
  event_output_id: JSON
  """This is to capture when the action is taken place."""
  event_timestamp: Date
  internal_tag: JSON
  """This field is reserved for Enaleia internal, when team need to enter data on behalf of port coordinator"""
  on_behalf_of: String
  production_id: String
  sort: Int
  sponsor_id: Int
  status: String
  user_created: String
  user_updated: String
}

type version_Events_Input {
  date_created: Date
  date_updated: Date
  event_id: JSON
  event_input_id: ID
  input_Material: Int
  input_code: String
  input_weight: Int
  sort: Int
  status: String
  user_created: String
  user_updated: String
}

type version_Events_Output {
  date_created: Date
  date_updated: Date
  event_id: JSON
  event_output_id: ID
  output_code: String
  output_material: Int
  output_weight: Int
  sort: Int
  status: String
  user_created: String
  user_updated: String
}

type version_Materials {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  material_description: String
  material_id: ID!
  material_name: String
  sort: Int
  status: String
  user_created: JSON
  user_role: JSON
  user_role_func: count_functions
  user_updated: JSON
}

type version_Materials_directus_roles {
  Materials_material_id: JSON
  directus_roles_id: JSON
  id: ID!
}

type version_Production {
  NFT_link: String
  batch_identifier: String
  batch_quantity: Int
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  event_id: JSON
  product_id: JSON
  production_id: ID!
  production_url: String
  sort: Int
  status: String
  user_created: JSON
  user_updated: JSON
}

type version_Products {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  manufactured_by: JSON
  product_id: ID!
  product_name: String
  product_type: JSON
  product_type_func: count_functions
  product_weight: Int
  section_title: String
  sort: Int
  status: String
  user_created: JSON
  user_updated: JSON
}

type version_Sponsors {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  sort: Int
  sponsor_id: ID!
  sponsor_name: String
  status: String
  user_created: JSON
  user_updated: JSON
}

type version_activity {
  date_created: Date
  id: ID
  location: GraphQLGeoJSON
  type: String
  user_created: String
}

type version_resource {
  id: ID
  identifier: String
  materials: String
  type: String
  weight_kg: Float
}
