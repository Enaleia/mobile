schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Actions {
  action_description: String
  action_group: String
  action_id: ID!
  action_name: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type Actions_aggregated {
  avg: Actions_aggregated_fields
  avgDistinct: Actions_aggregated_fields
  count: Actions_aggregated_count
  countAll: Int
  countDistinct: Actions_aggregated_count
  group: JSON
  max: Actions_aggregated_fields
  min: Actions_aggregated_fields
  sum: Actions_aggregated_fields
  sumDistinct: Actions_aggregated_fields
}

type Actions_aggregated_count {
  action_description: Int
  action_group: Int
  action_id: Int
  action_name: Int
  date_created: Int
  date_updated: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type Actions_aggregated_fields {
  action_id: Float
  sort: Float
}

input Actions_filter {
  _and: [Actions_filter]
  _or: [Actions_filter]
  action_description: string_filter_operators
  action_group: string_filter_operators
  action_id: number_filter_operators
  action_name: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type Actions_mutated {
  data: Actions
  event: EventEnum
  key: ID!
}

type Collectors {
  collector_company_name: String
  collector_id: ID!
  """This is the number that we will print on the fisherman's ID card"""
  collector_identity: String
  contact_person: String
  country(filter: countries_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): countries
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  fishing_season: JSON
  fishing_season_func: count_functions
  fishing_zone: GraphQLGeoJSON
  """Is the collector active?"""
  is_active: Boolean
  registered_port: Int
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  vessel_name: String
  vessel_type(filter: Vessels_Type_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Vessels_Type
}

type Collectors_aggregated {
  avg: Collectors_aggregated_fields
  avgDistinct: Collectors_aggregated_fields
  count: Collectors_aggregated_count
  countAll: Int
  countDistinct: Collectors_aggregated_count
  group: JSON
  max: Collectors_aggregated_fields
  min: Collectors_aggregated_fields
  sum: Collectors_aggregated_fields
  sumDistinct: Collectors_aggregated_fields
}

type Collectors_aggregated_count {
  collector_company_name: Int
  collector_id: Int
  """This is the number that we will print on the fisherman's ID card"""
  collector_identity: Int
  contact_person: Int
  country: Int
  date_created: Int
  date_updated: Int
  fishing_season: Int
  fishing_zone: Int
  """Is the collector active?"""
  is_active: Int
  registered_port: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
  vessel_name: Int
  vessel_type: Int
}

type Collectors_aggregated_fields {
  collector_id: Float
  country: Float
  registered_port: Float
  sort: Float
  vessel_type: Float
}

input Collectors_filter {
  _and: [Collectors_filter]
  _or: [Collectors_filter]
  collector_company_name: string_filter_operators
  collector_id: number_filter_operators
  collector_identity: string_filter_operators
  contact_person: string_filter_operators
  country: countries_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  fishing_season: string_filter_operators
  fishing_season_func: count_function_filter_operators
  fishing_zone: geometry_filter_operators
  is_active: boolean_filter_operators
  registered_port: number_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
  vessel_name: string_filter_operators
  vessel_type: Vessels_Type_filter
}

type Collectors_mutated {
  data: Collectors
  event: EventEnum
  key: ID!
}

"""ISO8601 Date values"""
scalar Date

enum EventEnum {
  create
  delete
  update
}

type Events {
  """The UID from EAS. DO NOT edit this field."""
  EAS_UID: String
  """This is when the data has submitted to the blockchain. DO NOT edit."""
  EAS_timestamp: Date
  EAS_timestamp_func: datetime_functions
  action(filter: Actions_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Actions
  collector_name(filter: Collectors_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Collectors
  company: Int
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  """This should be system autogenerated"""
  event_id: ID!
  event_input_id(filter: Events_Input_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Input]
  event_input_id_func: count_functions
  """This is WHERE the event happen. It should be feeded by the mobile app."""
  event_location: String
  event_output_id(filter: Events_Output_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Output]
  event_output_id_func: count_functions
  """The date and time at which the action occurred."""
  event_timestamp: Date
  event_timestamp_func: datetime_functions
  """Just tag things so its easy to find."""
  internal_tag: JSON
  internal_tag_func: count_functions
  sort: Int
  sponsor_id(filter: Sponsors_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Sponsors
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  """This is for internal operation, so they can refer the event to a weight slip."""
  weight_slip_ref: Int
}

type Events_Input {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  event_id(filter: Events_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Events
  event_input_id: ID!
  input_Material(filter: Materials_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Materials
  """The QR code on the incoming material. Exception: If the Action is collection, then it represent the Collector ID card number."""
  input_code: String
  """The weight of the incoming material"""
  input_weight: Int
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type Events_Input_aggregated {
  avg: Events_Input_aggregated_fields
  avgDistinct: Events_Input_aggregated_fields
  count: Events_Input_aggregated_count
  countAll: Int
  countDistinct: Events_Input_aggregated_count
  group: JSON
  max: Events_Input_aggregated_fields
  min: Events_Input_aggregated_fields
  sum: Events_Input_aggregated_fields
  sumDistinct: Events_Input_aggregated_fields
}

type Events_Input_aggregated_count {
  date_created: Int
  date_updated: Int
  event_id: Int
  event_input_id: Int
  """The incoming material type"""
  input_Material: Int
  """The QR code on the incoming material. Exception: If the Action is collection, then it represent the Collector ID card number."""
  input_code: Int
  """The weight of the incoming material"""
  input_weight: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type Events_Input_aggregated_fields {
  event_id: Float
  event_input_id: Float
  """The incoming material type"""
  input_Material: Float
  """The weight of the incoming material"""
  input_weight: Float
  sort: Float
}

input Events_Input_filter {
  _and: [Events_Input_filter]
  _or: [Events_Input_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  event_id: Events_filter
  event_input_id: number_filter_operators
  input_Material: Materials_filter
  input_code: string_filter_operators
  input_weight: number_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type Events_Input_mutated {
  data: Events_Input
  event: EventEnum
  key: ID!
}

type Events_Output {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  event_id(filter: Events_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Events
  event_output_id: ID!
  """The QR code on the outgoing material. Exception: If the Action is manufacturing, this field should remain empty."""
  output_code: String
  output_material(filter: Materials_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Materials
  """The weight of the outgoing material"""
  output_weight: Int
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type Events_Output_aggregated {
  avg: Events_Output_aggregated_fields
  avgDistinct: Events_Output_aggregated_fields
  count: Events_Output_aggregated_count
  countAll: Int
  countDistinct: Events_Output_aggregated_count
  group: JSON
  max: Events_Output_aggregated_fields
  min: Events_Output_aggregated_fields
  sum: Events_Output_aggregated_fields
  sumDistinct: Events_Output_aggregated_fields
}

type Events_Output_aggregated_count {
  date_created: Int
  date_updated: Int
  event_id: Int
  event_output_id: Int
  """The QR code on the outgoing material. Exception: If the Action is manufacturing, this field should remain empty."""
  output_code: Int
  """The outgoing material type"""
  output_material: Int
  """The weight of the outgoing material"""
  output_weight: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type Events_Output_aggregated_fields {
  event_id: Float
  event_output_id: Float
  """The outgoing material type"""
  output_material: Float
  """The weight of the outgoing material"""
  output_weight: Float
  sort: Float
}

input Events_Output_filter {
  _and: [Events_Output_filter]
  _or: [Events_Output_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  event_id: Events_filter
  event_output_id: number_filter_operators
  output_code: string_filter_operators
  output_material: Materials_filter
  output_weight: number_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type Events_Output_mutated {
  data: Events_Output
  event: EventEnum
  key: ID!
}

type Events_aggregated {
  avg: Events_aggregated_fields
  avgDistinct: Events_aggregated_fields
  count: Events_aggregated_count
  countAll: Int
  countDistinct: Events_aggregated_count
  group: JSON
  max: Events_aggregated_fields
  min: Events_aggregated_fields
  sum: Events_aggregated_fields
  sumDistinct: Events_aggregated_fields
}

type Events_aggregated_count {
  """The UID from EAS. DO NOT edit this field."""
  EAS_UID: Int
  """This is when the data has submitted to the blockchain. DO NOT edit."""
  EAS_timestamp: Int
  """The action type. ex. Fishing for litter, Sorting, Pelletizing, Manufacturing ..."""
  action: Int
  collector_name: Int
  company: Int
  date_created: Int
  date_updated: Int
  """This should be system autogenerated"""
  event_id: Int
  """Use this section to enter Incoming: Material(s), QR Number(s) and Weight(s)"""
  event_input_id: Int
  """This is WHERE the event happen. It should be feeded by the mobile app."""
  event_location: Int
  """Use this section to enter Outgoing: Material(s), QR Number(s) and Weight(s)"""
  event_output_id: Int
  """The date and time at which the action occurred."""
  event_timestamp: Int
  """Just tag things so its easy to find."""
  internal_tag: Int
  sort: Int
  """The sponsor for the Action. """
  sponsor_id: Int
  status: Int
  user_created: Int
  user_updated: Int
  """This is for internal operation, so they can refer the event to a weight slip."""
  weight_slip_ref: Int
}

type Events_aggregated_fields {
  """The action type. ex. Fishing for litter, Sorting, Pelletizing, Manufacturing ..."""
  action: Float
  collector_name: Float
  company: Float
  """This should be system autogenerated"""
  event_id: Float
  sort: Float
  """The sponsor for the Action. """
  sponsor_id: Float
  """This is for internal operation, so they can refer the event to a weight slip."""
  weight_slip_ref: Float
}

input Events_filter {
  EAS_UID: string_filter_operators
  EAS_timestamp: date_filter_operators
  EAS_timestamp_func: datetime_function_filter_operators
  _and: [Events_filter]
  _or: [Events_filter]
  action: Actions_filter
  collector_name: Collectors_filter
  company: number_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  event_id: number_filter_operators
  event_input_id: Events_Input_filter
  event_input_id_func: count_function_filter_operators
  event_location: string_filter_operators
  event_output_id: Events_Output_filter
  event_output_id_func: count_function_filter_operators
  event_timestamp: date_filter_operators
  event_timestamp_func: datetime_function_filter_operators
  internal_tag: string_filter_operators
  internal_tag_func: count_function_filter_operators
  sort: number_filter_operators
  sponsor_id: Sponsors_filter
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
  weight_slip_ref: number_filter_operators
}

type Events_mutated {
  data: Events
  event: EventEnum
  key: ID!
}

"""GeoJSON value"""
scalar GraphQLGeoJSON

"""A Float or a String"""
scalar GraphQLStringOrFloat

"""Hashed string values"""
scalar Hash

"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON

type Materials {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  material_description: String
  material_id: ID!
  material_name: String
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type Materials_aggregated {
  avg: Materials_aggregated_fields
  avgDistinct: Materials_aggregated_fields
  count: Materials_aggregated_count
  countAll: Int
  countDistinct: Materials_aggregated_count
  group: JSON
  max: Materials_aggregated_fields
  min: Materials_aggregated_fields
  sum: Materials_aggregated_fields
  sumDistinct: Materials_aggregated_fields
}

type Materials_aggregated_count {
  date_created: Int
  date_updated: Int
  material_description: Int
  material_id: Int
  material_name: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type Materials_aggregated_fields {
  material_id: Float
  sort: Float
}

input Materials_filter {
  _and: [Materials_filter]
  _or: [Materials_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  material_description: string_filter_operators
  material_id: number_filter_operators
  material_name: string_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type Materials_mutated {
  data: Materials
  event: EventEnum
  key: ID!
}

type Mutation {
  create_Events_Input_item(data: create_Events_Input_input!): Events_Input
  create_Events_Input_items(data: [create_Events_Input_input!], filter: Events_Input_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Input!]!
  create_Events_Output_item(data: create_Events_Output_input!): Events_Output
  create_Events_Output_items(data: [create_Events_Output_input!], filter: Events_Output_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Output!]!
  create_Events_item(data: create_Events_input!): Events
  create_Events_items(data: [create_Events_input!], filter: Events_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events!]!
  create_Production_item(data: create_Production_input!): Production
  create_Production_items(data: [create_Production_input!], filter: Production_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Production!]!
  create_Vessels_Type_item(data: create_Vessels_Type_input!): Vessels_Type
  create_Vessels_Type_items(data: [create_Vessels_Type_input!], filter: Vessels_Type_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Vessels_Type!]!
  create_activity_item(data: create_activity_input!): activity
  create_activity_items(data: [create_activity_input!], filter: activity_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [activity!]!
  create_resource_item(data: create_resource_input!): resource
  create_resource_items(data: [create_resource_input!], filter: resource_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [resource!]!
  delete_Vessels_Type_item(id: ID!): delete_one
  delete_Vessels_Type_items(ids: [ID]!): delete_many
  update_Events_Input_batch(data: [update_Events_Input_input!], filter: Events_Input_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Input!]!
  update_Events_Input_item(data: update_Events_Input_input!, id: ID!): Events_Input
  update_Events_Input_items(data: update_Events_Input_input!, filter: Events_Input_filter, ids: [ID]!, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Input!]!
  update_Events_Output_batch(data: [update_Events_Output_input!], filter: Events_Output_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Output!]!
  update_Events_Output_item(data: update_Events_Output_input!, id: ID!): Events_Output
  update_Events_Output_items(data: update_Events_Output_input!, filter: Events_Output_filter, ids: [ID]!, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Output!]!
  update_Events_batch(data: [update_Events_input!], filter: Events_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events!]!
  update_Events_item(data: update_Events_input!, id: ID!): Events
  update_Events_items(data: update_Events_input!, filter: Events_filter, ids: [ID]!, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events!]!
  update_Production_batch(data: [update_Production_input!], filter: Production_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Production!]!
  update_Production_item(data: update_Production_input!, id: ID!): Production
  update_Production_items(data: update_Production_input!, filter: Production_filter, ids: [ID]!, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Production!]!
  update_Vessels_Type_batch(data: [update_Vessels_Type_input!], filter: Vessels_Type_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Vessels_Type!]!
  update_Vessels_Type_item(data: update_Vessels_Type_input!, id: ID!): Vessels_Type
  update_Vessels_Type_items(data: update_Vessels_Type_input!, filter: Vessels_Type_filter, ids: [ID]!, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Vessels_Type!]!
}

type Production {
  """The NFT link for this product."""
  NFT_link: String
  """The batch data identifier. Format: YYYYMMDD. ex. 20241209"""
  batch_identifier: String
  """The number of items manufactured in this batch."""
  batch_quantity: Int
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  event_id(filter: Events_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Events
  product_id(filter: Products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): Products
  production_id: ID!
  """The URL for this product. Format: https://enaleia-hub.com/product?user_id=user_id&product_id:=product_id&batch_identifier=YYYYMMDD"""
  production_url: String
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type Production_aggregated {
  avg: Production_aggregated_fields
  avgDistinct: Production_aggregated_fields
  count: Production_aggregated_count
  countAll: Int
  countDistinct: Production_aggregated_count
  group: JSON
  max: Production_aggregated_fields
  min: Production_aggregated_fields
  sum: Production_aggregated_fields
  sumDistinct: Production_aggregated_fields
}

type Production_aggregated_count {
  """The NFT link for this product."""
  NFT_link: Int
  """The batch data identifier. Format: YYYYMMDD. ex. 20241209"""
  batch_identifier: Int
  """The number of items manufactured in this batch."""
  batch_quantity: Int
  date_created: Int
  date_updated: Int
  event_id: Int
  """The product type that was manufactured"""
  product_id: Int
  production_id: Int
  """The URL for this product. Format: https://enaleia-hub.com/product?user_id=user_id&product_id:=product_id&batch_identifier=YYYYMMDD"""
  production_url: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type Production_aggregated_fields {
  """The number of items manufactured in this batch."""
  batch_quantity: Float
  event_id: Float
  """The product type that was manufactured"""
  product_id: Float
  production_id: Float
  sort: Float
}

input Production_filter {
  NFT_link: string_filter_operators
  _and: [Production_filter]
  _or: [Production_filter]
  batch_identifier: string_filter_operators
  batch_quantity: number_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  event_id: Events_filter
  product_id: Products_filter
  production_id: number_filter_operators
  production_url: string_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type Production_mutated {
  data: Production
  event: EventEnum
  key: ID!
}

type Products {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  manufactured_by(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  product_id: ID!
  product_images: String
  product_images_func: count_functions
  product_name: String
  product_type: String
  product_weight: Int
  section_title: String
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type Products_aggregated {
  avg: Products_aggregated_fields
  avgDistinct: Products_aggregated_fields
  count: Products_aggregated_count
  countAll: Int
  countDistinct: Products_aggregated_count
  group: JSON
  max: Products_aggregated_fields
  min: Products_aggregated_fields
  sum: Products_aggregated_fields
  sumDistinct: Products_aggregated_fields
}

type Products_aggregated_count {
  date_created: Int
  date_updated: Int
  manufactured_by: Int
  product_id: Int
  product_images: Int
  product_name: Int
  product_type: Int
  product_weight: Int
  section_title: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type Products_aggregated_fields {
  product_id: Float
  product_weight: Float
  sort: Float
}

input Products_filter {
  _and: [Products_filter]
  _or: [Products_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  manufactured_by: directus_users_filter
  product_id: number_filter_operators
  product_images: string_filter_operators
  product_images_func: count_function_filter_operators
  product_name: string_filter_operators
  product_type: string_filter_operators
  product_weight: number_filter_operators
  section_title: string_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type Products_mutated {
  data: Products
  event: EventEnum
  key: ID!
}

type Query {
  Actions(filter: Actions_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Actions!]!
  Actions_aggregated(filter: Actions_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Actions_aggregated!]!
  Actions_by_id(id: ID!, version: String): Actions
  Actions_by_version(id: ID!, version: String!): version_Actions
  Collectors(filter: Collectors_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Collectors!]!
  Collectors_aggregated(filter: Collectors_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Collectors_aggregated!]!
  Collectors_by_id(id: ID!, version: String): Collectors
  Collectors_by_version(id: ID!, version: String!): version_Collectors
  Events(filter: Events_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events!]!
  Events_Input(filter: Events_Input_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Input!]!
  Events_Input_aggregated(filter: Events_Input_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Input_aggregated!]!
  Events_Input_by_id(id: ID!, version: String): Events_Input
  Events_Input_by_version(id: ID!, version: String!): version_Events_Input
  Events_Output(filter: Events_Output_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Output!]!
  Events_Output_aggregated(filter: Events_Output_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_Output_aggregated!]!
  Events_Output_by_id(id: ID!, version: String): Events_Output
  Events_Output_by_version(id: ID!, version: String!): version_Events_Output
  Events_aggregated(filter: Events_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Events_aggregated!]!
  Events_by_id(id: ID!, version: String): Events
  Events_by_version(id: ID!, version: String!): version_Events
  Materials(filter: Materials_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Materials!]!
  Materials_aggregated(filter: Materials_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Materials_aggregated!]!
  Materials_by_id(id: ID!, version: String): Materials
  Materials_by_version(id: ID!, version: String!): version_Materials
  Production(filter: Production_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Production!]!
  Production_aggregated(filter: Production_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Production_aggregated!]!
  Production_by_id(id: ID!, version: String): Production
  Production_by_version(id: ID!, version: String!): version_Production
  Products(filter: Products_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Products!]!
  Products_aggregated(filter: Products_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Products_aggregated!]!
  Products_by_id(id: ID!, version: String): Products
  Products_by_version(id: ID!, version: String!): version_Products
  Sponsors(filter: Sponsors_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Sponsors!]!
  Sponsors_aggregated(filter: Sponsors_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Sponsors_aggregated!]!
  Sponsors_by_id(id: ID!, version: String): Sponsors
  Sponsors_by_version(id: ID!, version: String!): version_Sponsors
  Vessels_Type(filter: Vessels_Type_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Vessels_Type!]!
  Vessels_Type_aggregated(filter: Vessels_Type_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Vessels_Type_aggregated!]!
  Vessels_Type_by_id(id: ID!, version: String): Vessels_Type
  Vessels_Type_by_version(id: ID!, version: String!): version_Vessels_Type
  activity(filter: activity_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [activity!]!
  activity_aggregated(filter: activity_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [activity_aggregated!]!
  activity_by_id(id: ID!, version: String): activity
  activity_by_version(id: ID!, version: String!): version_activity
  countries(filter: countries_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [countries!]!
  countries_aggregated(filter: countries_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [countries_aggregated!]!
  countries_by_id(id: ID!, version: String): countries
  countries_by_version(id: ID!, version: String!): version_countries
  resource(filter: resource_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [resource!]!
  resource_aggregated(filter: resource_filter, groupBy: [String], limit: Int, offset: Int, page: Int, search: String, sort: [String]): [resource_aggregated!]!
  resource_by_id(id: ID!, version: String): resource
  resource_by_version(id: ID!, version: String!): version_resource
}

type Sponsors {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  sort: Int
  sponsor_contact: String
  sponsor_id: ID!
  sponsor_name: String
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type Sponsors_aggregated {
  avg: Sponsors_aggregated_fields
  avgDistinct: Sponsors_aggregated_fields
  count: Sponsors_aggregated_count
  countAll: Int
  countDistinct: Sponsors_aggregated_count
  group: JSON
  max: Sponsors_aggregated_fields
  min: Sponsors_aggregated_fields
  sum: Sponsors_aggregated_fields
  sumDistinct: Sponsors_aggregated_fields
}

type Sponsors_aggregated_count {
  date_created: Int
  date_updated: Int
  sort: Int
  sponsor_contact: Int
  sponsor_id: Int
  sponsor_name: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type Sponsors_aggregated_fields {
  sort: Float
  sponsor_id: Float
}

input Sponsors_filter {
  _and: [Sponsors_filter]
  _or: [Sponsors_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  sort: number_filter_operators
  sponsor_contact: string_filter_operators
  sponsor_id: number_filter_operators
  sponsor_name: string_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type Sponsors_mutated {
  data: Sponsors
  event: EventEnum
  key: ID!
}

type Subscription {
  Actions_mutated(event: EventEnum): Actions_mutated
  Collectors_mutated(event: EventEnum): Collectors_mutated
  Events_Input_mutated(event: EventEnum): Events_Input_mutated
  Events_Output_mutated(event: EventEnum): Events_Output_mutated
  Events_mutated(event: EventEnum): Events_mutated
  Materials_mutated(event: EventEnum): Materials_mutated
  Production_mutated(event: EventEnum): Production_mutated
  Products_mutated(event: EventEnum): Products_mutated
  Sponsors_mutated(event: EventEnum): Sponsors_mutated
  Vessels_Type_mutated(event: EventEnum): Vessels_Type_mutated
  activity_mutated(event: EventEnum): activity_mutated
  countries_mutated(event: EventEnum): countries_mutated
  directus_access_mutated(event: EventEnum): directus_access_mutated
  directus_operations_mutated(event: EventEnum): directus_operations_mutated
  directus_roles_mutated(event: EventEnum): directus_roles_mutated
  directus_users_mutated(event: EventEnum): directus_users_mutated
  resource_mutated(event: EventEnum): resource_mutated
}

type Vessels_Type {
  Description: String
  Greek: String
  Vessels_type: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  id: ID!
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type Vessels_Type_aggregated {
  avg: Vessels_Type_aggregated_fields
  avgDistinct: Vessels_Type_aggregated_fields
  count: Vessels_Type_aggregated_count
  countAll: Int
  countDistinct: Vessels_Type_aggregated_count
  group: JSON
  max: Vessels_Type_aggregated_fields
  min: Vessels_Type_aggregated_fields
  sum: Vessels_Type_aggregated_fields
  sumDistinct: Vessels_Type_aggregated_fields
}

type Vessels_Type_aggregated_count {
  Description: Int
  Greek: Int
  Vessels_type: Int
  date_created: Int
  date_updated: Int
  id: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type Vessels_Type_aggregated_fields {
  id: Float
  sort: Float
}

input Vessels_Type_filter {
  Description: string_filter_operators
  Greek: string_filter_operators
  Vessels_type: string_filter_operators
  _and: [Vessels_Type_filter]
  _or: [Vessels_Type_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  id: number_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type Vessels_Type_mutated {
  data: Vessels_Type
  event: EventEnum
  key: ID!
}

type activity {
  date_created: Date
  date_created_func: datetime_functions
  id: ID!
  location: GraphQLGeoJSON
  type: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type activity_aggregated {
  count: activity_aggregated_count
  countAll: Int
  countDistinct: activity_aggregated_count
  group: JSON
}

type activity_aggregated_count {
  date_created: Int
  id: Int
  location: Int
  type: Int
  user_created: Int
}

input activity_filter {
  _and: [activity_filter]
  _or: [activity_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  id: string_filter_operators
  location: geometry_filter_operators
  type: string_filter_operators
  user_created: directus_users_filter
}

type activity_mutated {
  data: activity
  event: EventEnum
  key: ID!
}

input boolean_filter_operators {
  _eq: Boolean
  _neq: Boolean
  _nnull: Boolean
  _null: Boolean
}

input count_function_filter_operators {
  count: number_filter_operators
}

type count_functions {
  count: Int
}

type countries {
  country_color: String
  country_id: ID!
  country_name: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  sort: Int
  status: String
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
  user_updated(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

type countries_aggregated {
  avg: countries_aggregated_fields
  avgDistinct: countries_aggregated_fields
  count: countries_aggregated_count
  countAll: Int
  countDistinct: countries_aggregated_count
  group: JSON
  max: countries_aggregated_fields
  min: countries_aggregated_fields
  sum: countries_aggregated_fields
  sumDistinct: countries_aggregated_fields
}

type countries_aggregated_count {
  country_color: Int
  country_id: Int
  country_name: Int
  date_created: Int
  date_updated: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type countries_aggregated_fields {
  country_id: Float
  sort: Float
}

input countries_filter {
  _and: [countries_filter]
  _or: [countries_filter]
  country_color: string_filter_operators
  country_id: number_filter_operators
  country_name: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
}

type countries_mutated {
  data: countries
  event: EventEnum
  key: ID!
}

input create_Events_Input_input {
  date_created: Date
  date_updated: Date
  event_id: create_Events_input
  event_input_id: ID
  """The incoming material type"""
  input_Material: Int
  """The QR code on the incoming material. Exception: If the Action is collection, then it represent the Collector ID card number."""
  input_code: String
  """The weight of the incoming material"""
  input_weight: Int
  sort: Int
  status: String
  user_created: String
  user_updated: String
}

input create_Events_Output_input {
  date_created: Date
  date_updated: Date
  event_id: create_Events_input
  event_output_id: ID
  """The QR code on the outgoing material. Exception: If the Action is manufacturing, this field should remain empty."""
  output_code: String
  """The outgoing material type"""
  output_material: Int
  """The weight of the outgoing material"""
  output_weight: Int
  sort: Int
  status: String
  user_created: String
  user_updated: String
}

input create_Events_input {
  """The UID from EAS. DO NOT edit this field."""
  EAS_UID: String
  """This is when the data has submitted to the blockchain. DO NOT edit."""
  EAS_timestamp: Date
  """The action type. ex. Fishing for litter, Sorting, Pelletizing, Manufacturing ..."""
  action: Int
  collector_name: Int
  company: Int
  date_created: Date
  date_updated: Date
  """This should be system autogenerated"""
  event_id: ID
  event_input_id: [create_Events_Input_input]
  """This is WHERE the event happen. It should be feeded by the mobile app."""
  event_location: String
  event_output_id: [create_Events_Output_input]
  """The date and time at which the action occurred."""
  event_timestamp: Date
  """Just tag things so its easy to find."""
  internal_tag: JSON
  sort: Int
  """The sponsor for the Action. """
  sponsor_id: Int
  status: String
  user_created: String
  user_updated: String
  """This is for internal operation, so they can refer the event to a weight slip."""
  weight_slip_ref: Int
}

input create_Production_input {
  """The NFT link for this product."""
  NFT_link: String
  """The batch data identifier. Format: YYYYMMDD. ex. 20241209"""
  batch_identifier: String
  """The number of items manufactured in this batch."""
  batch_quantity: Int
  date_created: Date
  date_updated: Date
  event_id: create_Events_input
  """The product type that was manufactured"""
  product_id: Int
  production_id: ID
  """The URL for this product. Format: https://enaleia-hub.com/product?user_id=user_id&product_id:=product_id&batch_identifier=YYYYMMDD"""
  production_url: String
  sort: Int
  status: String
  user_created: String
  user_updated: String
}

input create_Vessels_Type_input {
  Description: String
  Greek: String
  Vessels_type: String
  date_created: Date
  date_updated: Date
  id: ID
  sort: Int
  status: String
  user_created: String
  user_updated: String
}

input create_activity_input {
  date_created: Date
  id: ID
  location: GraphQLGeoJSON
  type: String
  user_created: String
}

input create_resource_input {
  id: ID
  identifier: String
  materials: String
  type: String
  weight_kg: Float
}

input date_filter_operators {
  _between: [GraphQLStringOrFloat]
  _eq: String
  _gt: String
  _gte: String
  _in: [String]
  _lt: String
  _lte: String
  _nbetween: [GraphQLStringOrFloat]
  _neq: String
  _nin: [String]
  _nnull: Boolean
  _null: Boolean
}

input datetime_function_filter_operators {
  day: number_filter_operators
  hour: number_filter_operators
  minute: number_filter_operators
  month: number_filter_operators
  second: number_filter_operators
  week: number_filter_operators
  weekday: number_filter_operators
  year: number_filter_operators
}

type datetime_functions {
  day: Int
  hour: Int
  minute: Int
  month: Int
  second: Int
  week: Int
  weekday: Int
  year: Int
}

type delete_many {
  ids: [ID]!
}

type delete_one {
  id: ID!
}

type directus_access {
  id: ID!
  policy: String!
  role(filter: directus_roles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_roles
  sort: Int
  user(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

input directus_access_filter {
  _and: [directus_access_filter]
  _or: [directus_access_filter]
  id: string_filter_operators
  policy: string_filter_operators
  role: directus_roles_filter
  sort: number_filter_operators
  user: directus_users_filter
}

type directus_access_mutated {
  data: directus_access
  event: EventEnum
  key: ID!
}

type directus_operations {
  date_created: Date
  date_created_func: datetime_functions
  flow: String!
  id: ID!
  key: String!
  name: String
  options: JSON
  options_func: count_functions
  position_x: Int!
  position_y: Int!
  reject(filter: directus_operations_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_operations
  resolve(filter: directus_operations_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_operations
  type: String!
  user_created(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_users
}

input directus_operations_filter {
  _and: [directus_operations_filter]
  _or: [directus_operations_filter]
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  flow: string_filter_operators
  id: string_filter_operators
  key: string_filter_operators
  name: string_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  reject: directus_operations_filter
  resolve: directus_operations_filter
  type: string_filter_operators
  user_created: directus_users_filter
}

type directus_operations_mutated {
  data: directus_operations
  event: EventEnum
  key: ID!
}

type directus_roles {
  children(filter: directus_roles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_roles]
  children_func: count_functions
  description: String
  icon: String
  id: ID!
  name: String!
  parent(filter: directus_roles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_roles
  policies(filter: directus_access_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_access]
  policies_func: count_functions
  users(filter: directus_users_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_users]
  users_func: count_functions
}

input directus_roles_filter {
  _and: [directus_roles_filter]
  _or: [directus_roles_filter]
  children: directus_roles_filter
  children_func: count_function_filter_operators
  description: string_filter_operators
  icon: string_filter_operators
  id: string_filter_operators
  name: string_filter_operators
  parent: directus_roles_filter
  policies: directus_access_filter
  policies_func: count_function_filter_operators
  users: directus_users_filter
  users_func: count_function_filter_operators
}

type directus_roles_mutated {
  data: directus_roles
  event: EventEnum
  key: ID!
}

type directus_users {
  Company: Int
  appearance: String
  auth_data: JSON
  auth_data_func: count_functions
  avatar: String
  description: String
  email: String
  email_notifications: Boolean
  external_identifier: String
  first_name: String
  id: ID!
  language: String
  last_access: Date
  last_access_func: datetime_functions
  last_name: String
  last_page: String
  location: String
  password: Hash
  policies(filter: directus_access_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_access]
  policies_func: count_functions
  provider: String
  role(filter: directus_roles_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): directus_roles
  status: String
  tags: JSON
  tags_func: count_functions
  tfa_secret: Hash
  theme_dark: String
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
  theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  title: String
  token: Hash
  """This field is reserve to write their crypto wallet address, please DO NOT edit."""
  wallet_address: String
}

input directus_users_filter {
  Company: number_filter_operators
  _and: [directus_users_filter]
  _or: [directus_users_filter]
  appearance: string_filter_operators
  auth_data: string_filter_operators
  auth_data_func: count_function_filter_operators
  avatar: string_filter_operators
  description: string_filter_operators
  email: string_filter_operators
  email_notifications: boolean_filter_operators
  external_identifier: string_filter_operators
  first_name: string_filter_operators
  id: string_filter_operators
  language: string_filter_operators
  last_access: date_filter_operators
  last_access_func: datetime_function_filter_operators
  last_name: string_filter_operators
  last_page: string_filter_operators
  location: string_filter_operators
  password: hash_filter_operators
  policies: directus_access_filter
  policies_func: count_function_filter_operators
  provider: string_filter_operators
  role: directus_roles_filter
  status: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  tfa_secret: hash_filter_operators
  theme_dark: string_filter_operators
  theme_dark_overrides: string_filter_operators
  theme_dark_overrides_func: count_function_filter_operators
  theme_light: string_filter_operators
  theme_light_overrides: string_filter_operators
  theme_light_overrides_func: count_function_filter_operators
  title: string_filter_operators
  token: hash_filter_operators
  wallet_address: string_filter_operators
}

type directus_users_mutated {
  data: directus_users
  event: EventEnum
  key: ID!
}

input geometry_filter_operators {
  _eq: GraphQLGeoJSON
  _intersects: GraphQLGeoJSON
  _intersects_bbox: GraphQLGeoJSON
  _neq: GraphQLGeoJSON
  _nintersects: GraphQLGeoJSON
  _nintersects_bbox: GraphQLGeoJSON
  _nnull: Boolean
  _null: Boolean
}

input hash_filter_operators {
  _empty: Boolean
  _nempty: Boolean
  _nnull: Boolean
  _null: Boolean
}

input number_filter_operators {
  _between: [GraphQLStringOrFloat]
  _eq: GraphQLStringOrFloat
  _gt: GraphQLStringOrFloat
  _gte: GraphQLStringOrFloat
  _in: [GraphQLStringOrFloat]
  _lt: GraphQLStringOrFloat
  _lte: GraphQLStringOrFloat
  _nbetween: [GraphQLStringOrFloat]
  _neq: GraphQLStringOrFloat
  _nin: [GraphQLStringOrFloat]
  _nnull: Boolean
  _null: Boolean
}

type resource {
  id: ID!
  identifier: String
  materials: String
  materials_func: count_functions
  type: String
  weight_kg: Float
}

type resource_aggregated {
  avg: resource_aggregated_fields
  avgDistinct: resource_aggregated_fields
  count: resource_aggregated_count
  countAll: Int
  countDistinct: resource_aggregated_count
  group: JSON
  max: resource_aggregated_fields
  min: resource_aggregated_fields
  sum: resource_aggregated_fields
  sumDistinct: resource_aggregated_fields
}

type resource_aggregated_count {
  id: Int
  identifier: Int
  materials: Int
  type: Int
  weight_kg: Int
}

type resource_aggregated_fields {
  weight_kg: Float
}

input resource_filter {
  _and: [resource_filter]
  _or: [resource_filter]
  id: string_filter_operators
  identifier: string_filter_operators
  materials: string_filter_operators
  materials_func: count_function_filter_operators
  type: string_filter_operators
  weight_kg: number_filter_operators
}

type resource_mutated {
  data: resource
  event: EventEnum
  key: ID!
}

input string_filter_operators {
  _contains: String
  _empty: Boolean
  _ends_with: String
  _eq: String
  _icontains: String
  _iends_with: String
  _in: [String]
  _istarts_with: String
  _ncontains: String
  _nempty: Boolean
  _nends_with: String
  _neq: String
  _niends_with: String
  _nin: [String]
  _nistarts_with: String
  _nnull: Boolean
  _nstarts_with: String
  _null: Boolean
  _starts_with: String
}

input update_Events_Input_input {
  date_created: Date
  date_updated: Date
  event_id: update_Events_input
  event_input_id: ID
  """The incoming material type"""
  input_Material: Int
  """The QR code on the incoming material. Exception: If the Action is collection, then it represent the Collector ID card number."""
  input_code: String
  """The weight of the incoming material"""
  input_weight: Int
  sort: Int
  status: String
  user_created: String
  user_updated: String
}

input update_Events_Output_input {
  date_created: Date
  date_updated: Date
  event_id: update_Events_input
  event_output_id: ID
  """The QR code on the outgoing material. Exception: If the Action is manufacturing, this field should remain empty."""
  output_code: String
  """The outgoing material type"""
  output_material: Int
  """The weight of the outgoing material"""
  output_weight: Int
  sort: Int
  status: String
  user_created: String
  user_updated: String
}

input update_Events_input {
  """The UID from EAS. DO NOT edit this field."""
  EAS_UID: String
  """This is when the data has submitted to the blockchain. DO NOT edit."""
  EAS_timestamp: Date
  """The action type. ex. Fishing for litter, Sorting, Pelletizing, Manufacturing ..."""
  action: Int
  collector_name: Int
  company: Int
  date_created: Date
  date_updated: Date
  """This should be system autogenerated"""
  event_id: ID
  event_input_id: [update_Events_Input_input]
  """This is WHERE the event happen. It should be feeded by the mobile app."""
  event_location: String
  event_output_id: [update_Events_Output_input]
  """The date and time at which the action occurred."""
  event_timestamp: Date
  """Just tag things so its easy to find."""
  internal_tag: JSON
  sort: Int
  """The sponsor for the Action. """
  sponsor_id: Int
  status: String
  user_created: String
  user_updated: String
  """This is for internal operation, so they can refer the event to a weight slip."""
  weight_slip_ref: Int
}

input update_Production_input {
  """The NFT link for this product."""
  NFT_link: String
  """The batch data identifier. Format: YYYYMMDD. ex. 20241209"""
  batch_identifier: String
  """The number of items manufactured in this batch."""
  batch_quantity: Int
  date_created: Date
  date_updated: Date
  event_id: update_Events_input
  """The product type that was manufactured"""
  product_id: Int
  production_id: ID
  """The URL for this product. Format: https://enaleia-hub.com/product?user_id=user_id&product_id:=product_id&batch_identifier=YYYYMMDD"""
  production_url: String
  sort: Int
  status: String
  user_created: String
  user_updated: String
}

input update_Vessels_Type_input {
  Description: String
  Greek: String
  Vessels_type: String
  date_created: Date
  date_updated: Date
  id: ID
  sort: Int
  status: String
  user_created: String
  user_updated: String
}

type version_Actions {
  action_description: String
  action_group: String
  action_id: ID!
  action_name: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  sort: Int
  status: String
  user_created: JSON
  user_updated: JSON
}

type version_Collectors {
  collector_company_name: String
  collector_id: ID!
  """This is the number that we will print on the fisherman's ID card"""
  collector_identity: String
  contact_person: String
  country: JSON
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  fishing_season: JSON
  fishing_season_func: count_functions
  fishing_zone: GraphQLGeoJSON
  """Is the collector active?"""
  is_active: Boolean
  registered_port: Int
  sort: Int
  status: String
  user_created: JSON
  user_updated: JSON
  vessel_name: String
  vessel_type: JSON
}

type version_Events {
  """The UID from EAS. DO NOT edit this field."""
  EAS_UID: String
  """This is when the data has submitted to the blockchain. DO NOT edit."""
  EAS_timestamp: Date
  """The action type. ex. Fishing for litter, Sorting, Pelletizing, Manufacturing ..."""
  action: Int
  collector_name: Int
  company: Int
  date_created: Date
  date_updated: Date
  """This should be system autogenerated"""
  event_id: ID
  event_input_id: JSON
  """This is WHERE the event happen. It should be feeded by the mobile app."""
  event_location: String
  event_output_id: JSON
  """The date and time at which the action occurred."""
  event_timestamp: Date
  """Just tag things so its easy to find."""
  internal_tag: JSON
  sort: Int
  """The sponsor for the Action. """
  sponsor_id: Int
  status: String
  user_created: String
  user_updated: String
  """This is for internal operation, so they can refer the event to a weight slip."""
  weight_slip_ref: Int
}

type version_Events_Input {
  date_created: Date
  date_updated: Date
  event_id: JSON
  event_input_id: ID
  """The incoming material type"""
  input_Material: Int
  """The QR code on the incoming material. Exception: If the Action is collection, then it represent the Collector ID card number."""
  input_code: String
  """The weight of the incoming material"""
  input_weight: Int
  sort: Int
  status: String
  user_created: String
  user_updated: String
}

type version_Events_Output {
  date_created: Date
  date_updated: Date
  event_id: JSON
  event_output_id: ID
  """The QR code on the outgoing material. Exception: If the Action is manufacturing, this field should remain empty."""
  output_code: String
  """The outgoing material type"""
  output_material: Int
  """The weight of the outgoing material"""
  output_weight: Int
  sort: Int
  status: String
  user_created: String
  user_updated: String
}

type version_Materials {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  material_description: String
  material_id: ID!
  material_name: String
  sort: Int
  status: String
  user_created: JSON
  user_updated: JSON
}

type version_Production {
  """The NFT link for this product."""
  NFT_link: String
  """The batch data identifier. Format: YYYYMMDD. ex. 20241209"""
  batch_identifier: String
  """The number of items manufactured in this batch."""
  batch_quantity: Int
  date_created: Date
  date_updated: Date
  event_id: JSON
  """The product type that was manufactured"""
  product_id: Int
  production_id: ID
  """The URL for this product. Format: https://enaleia-hub.com/product?user_id=user_id&product_id:=product_id&batch_identifier=YYYYMMDD"""
  production_url: String
  sort: Int
  status: String
  user_created: String
  user_updated: String
}

type version_Products {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  manufactured_by: JSON
  product_id: ID!
  product_images: String
  product_images_func: count_functions
  product_name: String
  product_type: String
  product_weight: Int
  section_title: String
  sort: Int
  status: String
  user_created: JSON
  user_updated: JSON
}

type version_Sponsors {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  sort: Int
  sponsor_contact: String
  sponsor_id: ID!
  sponsor_name: String
  status: String
  user_created: JSON
  user_updated: JSON
}

type version_Vessels_Type {
  Description: String
  Greek: String
  Vessels_type: String
  date_created: Date
  date_updated: Date
  id: ID
  sort: Int
  status: String
  user_created: String
  user_updated: String
}

type version_activity {
  date_created: Date
  id: ID
  location: GraphQLGeoJSON
  type: String
  user_created: String
}

type version_countries {
  country_color: String
  country_id: ID!
  country_name: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  sort: Int
  status: String
  user_created: JSON
  user_updated: JSON
}

type version_resource {
  id: ID
  identifier: String
  materials: String
  type: String
  weight_kg: Float
}
